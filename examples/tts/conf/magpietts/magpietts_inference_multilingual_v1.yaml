name: Magpie-TTS-ML-V1-Infer
mode: test
init_from_ptl_ckpt: ???
max_epochs: 1
# Adjust batch size based on GPU memory
batch_size: 16
# When doing weighted sampling with multiple manifests, this defines how many training steps are in an epoch.
# If null, then weighted sampling is disabled.
weighted_sampling_steps_per_epoch: null

# Dataset metadata for each manifest
# https://github.com/NVIDIA/NeMo/blob/main/nemo/collections/tts/data/vocoder_dataset.py#L39-L41
test_ds_meta: ???

phoneme_dict_path: "scripts/tts_dataset_files/ipa_cmudict-0.7b_nv23.01.txt"
heteronyms_path: "scripts/tts_dataset_files/heteronyms-052722"
model:
  use_kv_cache_for_inference: true
  inference_temperature: 0.7
  inference_topk: 80
  inference_use_cfg: false
  inference_cfg_scale: 1.0
  model_type: "multi_encoder_context_tts" # single_encoder_sv_tts, multi_encoder_context_tts, decoder_context_tts or decoder_pretrain_synthesizer
  use_text_conditioning_encoder: false
  transcript_decoder_layers: [3,4,5,6,7] # ONLY used in multi_encoder_context_tts, Transcript goes to these layer ids, context goes to the rest. In single_encoder_sv_tts, all layers are used for transcript.
  context_decoder_layers: [8,9] # ONLY used in multi_encoder_context_tts
  context_duration_min: 3.0
  context_duration_max: 8.0
  speaker_emb_dim: 192
  max_decoder_steps: 500
  load_cached_codes_if_available: true
  prior_scaling_factor: null
  prior_end_step: 0
  prior_scaledown_start_step: 0
  alignment_loss_scale: 0.0
  embedding_dim: 768
  codecmodel_path: null
  max_epochs: ${max_epochs}
  steps_per_epoch: ${weighted_sampling_steps_per_epoch}

  # Alignment encoder parameters, to binarize the prior
  # This is used for attention-constrained training and inference
  use_alignment_encoder: false
  # Below args are only relevant if use_alignment_encoder is true
  use_prior_for_aligner: true # Whether to use the beta-binomial prior to train the alignment encoder
  alignment_encoder_loss_scale: 1.0
  binarize_prior_after_step: 10000 # Switch from beta-binomial prior to binarized prior after this step.
  binarize_attn_method: "nemo_binarize" # nemo_binarize or argmax.
  prior_future_context: 2 # Future window of the binarized prior.
  prior_past_context: 2 # Past window of the binarized prior.
  prior_future_decay: 0.8 # Decay factor for future context
  prior_past_decay: 0.5 # Decay factor for past context
  binarize_repeat_audio_factor: 2 # Temporally increase audio timesteps, for nemo_binarize to work better. Increase this for low frame rate codecs
  binarized_prior_epsilon: 0.0
  aligner_encoder_train_steps: 50000

  # Local transformer parameters for autoregressive codebook prediction within a frame
  local_transformer_type: "autoregressive" # "none", "autoregressive", "maskgit"
  # Below args are only relevant if use_local_transformer is true
  local_transformer_loss_scale: 1.0
  local_transformer_n_layers: 3
  local_transformer_n_heads: 1
  local_transformer_hidden_dim: 256

  text_context_remapping_json: null # JSON file defining mapping of multiple text contexts to a single text context. Does not need to cover all text contexts.
  text_context_remapping_prob: 0.0 # Probability of remapping the original text context to a remapped text context.

  text_tokenizers: # Add more languages for multi-lingual TTS
    english_phoneme:
      _target_: nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.IPATokenizer
      punct: true
      apostrophe: true
      pad_with_space: false
      g2p:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        phoneme_dict: "scripts/tts_dataset_files/ipa_cmudict-0.7b_nv23.01.txt"
        heteronyms: "scripts/tts_dataset_files/heteronyms-052722"
        phoneme_probability: 0.8
        ignore_ambiguous_words: false
        use_chars: true
        use_stresses: true
    spanish_phoneme:
      _target_: nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.IPATokenizer
      locale: es-ES
      punct: true
      apostrophe: true
      pad_with_space: true
      g2p:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        locale: es-ES
        phoneme_dict: "scripts/tts_dataset_files/es_ES/es_ES_nv230301.dict"
        phoneme_probability: 0.8
        ignore_ambiguous_words: false
        use_chars: true
        use_stresses: true
    german_phoneme:
      _target_: nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.IPATokenizer
      locale: de-DE
      punct: true
      apostrophe: true
      pad_with_space: true
      g2p:
        _target_: nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p
        locale: 'de-DE'
        phoneme_dict: "scripts/tts_dataset_files/de/de_nv230119.dict"
        heteronyms: "scripts/tts_dataset_files/de/de_nv230119.heteronym"
        phoneme_probability: 0.8
        ignore_ambiguous_words: false
        use_chars: true
        use_stresses: true
        grapheme_case: mixed
        grapheme_prefix: '#'
    mandarin_phoneme:
      _target_: nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.ChinesePhonemesTokenizer
      punct: true
      apostrophe: true
      pad_with_space: true
      g2p:
        _target_: nemo.collections.tts.g2p.models.zh_cn_pinyin.ChineseG2p
        phoneme_dict: "scripts/tts_dataset_files/zh/36finals/ipa_dict_nv23.05.txt"
        word_segmenter: "jieba"
        phoneme_prefix: ""
        phoneme_case: "lower"
        tone_prefix: "#"
        ascii_letter_prefix: ""
        ascii_letter_case: "upper"

  test_ds:
    dataset:
      _target_: nemo.collections.tts.data.text_to_speech_dataset.MagpieTTSDataset
      dataset_meta: ${test_ds_meta}
      min_duration: 0.5
      max_duration: 20.0

    dataloader_params:
      batch_size: ${batch_size}
      num_workers: 2

  encoder:
    n_layers: 6
    d_model: 768
    d_ffn: 3072
    sa_n_heads: 12
    kernel_size: 3
    p_dropout: 0.1
    p_dropout_out: 0.0
    has_xattn: false
    is_causal: False
    apply_norm_out: true
    max_length_causal_mask: 2048
    use_learnable_pos_emb: true

  context_encoder: # Only used for multi_encoder_context_tts, ignored otherwise
    n_layers: 3
    d_model: 768
    d_ffn: 3072
    sa_n_heads: 12
    kernel_size: 3
    p_dropout: 0.1
    p_dropout_out: 0.0
    has_xattn: false
    is_causal: false
    apply_norm_out: true
    max_length_causal_mask: 2048
    use_learnable_pos_emb: true

  decoder:
    n_layers: 12
    d_model: 768
    d_ffn: 3072
    sa_n_heads: 12
    kernel_size: 3
    p_dropout: 0.1
    p_dropout_out: 0.0
    has_xattn: true
    xa_d_memory: 768
    xa_n_heads: 12
    is_causal: true
    apply_norm_to_cond: true
    apply_norm_out: true
    max_length_causal_mask: 2048
    use_learnable_pos_emb: true

  optim:
    _target_: torch.optim.Adam
    lr: 2e-4
    betas: [0.8, 0.99]

    sched:
      name: ExponentialLR
      gamma: 0.998

trainer:
  num_nodes: 1
  devices: -1
  accelerator: gpu
  strategy: ddp_find_unused_parameters_true
  precision: 32
  max_epochs: ${max_epochs}
  accumulate_grad_batches: 1
  enable_checkpointing: False # Provided by exp_manager
  logger: false # Provided by exp_manager
  log_every_n_steps: 100
  val_check_interval: 500
  benchmark: false
  gradient_clip_val: 2.5

exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
  create_checkpoint_callback: true
  checkpoint_callback_params:
    monitor: val_loss
    mode: min
    save_top_k: 5
    save_best_model: true
    always_save_nemo: true
  resume_if_exists: true
  resume_ignore_no_checkpoint: true
